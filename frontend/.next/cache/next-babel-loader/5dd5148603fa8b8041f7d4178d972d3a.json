{"ast":null,"code":"import API from '../api';\n\nclass AuthService {\n  constructor() {\n    this.loggedIn = false;\n  }\n\n  login(mailInput, passwordInput, callback) {\n    let body = {\n      mail: mailInput,\n      password: passwordInput\n    };\n\n    if (isObj) {\n      body = mailInput;\n    }\n\n    console.log(\"sende login request\", body);\n    API.post(`/login`, body).then(res => {\n      if (res.status === 200) {\n        console.log(res);\n        localStorage.setItem('user', res.data.user.mail);\n        localStorage.setItem('Authorization', res.headers.authorization);\n        localStorage.setItem('userObject', JSON.stringify(res.data.user));\n        callback(res);\n      }\n    }).catch(err => {\n      console.log(err);\n      callback(err);\n    });\n  }\n\n  logout() {\n    localStorage.removeItem('user');\n    localStorage.removeItem('Authorization');\n    localStorage.removeItem('userObject');\n  }\n\n  async isLoggedIn() {\n    console.log(\"checke eingeloggt mit token \" + localStorage.getItem('Authorization'));\n\n    if (this.hasToken()) {\n      return new Promise((resolve, reject) => {\n        API.get('/user', this.getHeader()).then(res => {\n          if (res.status === 200) {\n            resolve(true);\n          }\n        }).catch(err => {\n          console.log(err);\n          localStorage.removeItem('Authorization');\n          localStorage.removeItem('user');\n          resolve(false);\n        });\n      });\n    } else {\n      console.log(\"kein token\");\n      return false;\n    }\n  }\n\n  register(mailInput, passwordInput, repeatedPasswordInput, com, successCallback) {\n    console.log(com);\n    API.post(`/register`, {\n      mail: mailInput,\n      password: passwordInput,\n      passwordConfirm: repeatedPasswordInput,\n      commercial: com\n    }).then(res => {\n      if (res.status === 200) {\n        successCallback(res);\n      }\n    }).catch(err => {\n      successCallback(err);\n    });\n  }\n\n  hasToken() {\n    if (localStorage.getItem('Authorization') != null) {\n      return true;\n    }\n\n    return false;\n  }\n\n  getHeader() {\n    return Object.create({\n      headers: {\n        Authorization: localStorage.getItem('Authorization'),\n        Username: localStorage.getItem('user')\n      }\n    });\n  }\n\n}\n\nexport default new AuthService();","map":{"version":3,"sources":["C:/Users/Nico/Dropbox/Studium/5. Semester/DKE PR/frontend/components/auth/authservice.js"],"names":["API","AuthService","constructor","loggedIn","login","mailInput","passwordInput","callback","body","mail","password","isObj","console","log","post","then","res","status","localStorage","setItem","data","user","headers","authorization","JSON","stringify","catch","err","logout","removeItem","isLoggedIn","getItem","hasToken","Promise","resolve","reject","get","getHeader","register","repeatedPasswordInput","com","successCallback","passwordConfirm","commercial","Object","create","Authorization","Username"],"mappings":"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","sourcesContent":["import API from '../api';\r\n\r\nclass AuthService {\r\n    constructor(){\r\n        this.loggedIn = false;\r\n    }\r\n\r\n    login(mailInput, passwordInput, callback){\r\n        let body = {\r\n            mail: mailInput,\r\n            password: passwordInput\r\n        }\r\n        if (isObj) {\r\n            body = mailInput;\r\n        }\r\n        console.log(\"sende login request\", body);\r\n        API.post(`/login`, body)\r\n        .then(res => {\r\n            if(res.status === 200){\r\n                console.log(res);\r\n                localStorage.setItem('user', res.data.user.mail);\r\n                localStorage.setItem('Authorization', res.headers.authorization);\r\n                localStorage.setItem('userObject', JSON.stringify(res.data.user));\r\n                callback(res);\r\n            }\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n            callback(err);\r\n        })\r\n    }\r\n\r\n    logout(){\r\n        localStorage.removeItem('user');\r\n        localStorage.removeItem('Authorization');\r\n        localStorage.removeItem('userObject');\r\n    }\r\n\r\n    async isLoggedIn(){\r\n        console.log(\"checke eingeloggt mit token \" + localStorage.getItem('Authorization'));\r\n        if(this.hasToken()){\r\n            return new Promise((resolve, reject) => {\r\n                API.get('/user', this.getHeader())\r\n                .then(res => {\r\n                    if(res.status === 200){\r\n                        resolve(true);\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                    localStorage.removeItem('Authorization');\r\n                    localStorage.removeItem('user');\r\n                    resolve(false);\r\n                })\r\n            });\r\n        }\r\n        else {\r\n            console.log(\"kein token\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    register(mailInput, passwordInput, repeatedPasswordInput, com, successCallback){\r\n            console.log(com);\r\n\r\n            API.post(`/register`, {\r\n                mail: mailInput,\r\n                password: passwordInput,\r\n                passwordConfirm: repeatedPasswordInput,\r\n                commercial: com\r\n            })\r\n            .then(res => {\r\n                if(res.status === 200){\r\n                    successCallback(res);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                successCallback(err);\r\n            });\r\n    }\r\n\r\n    hasToken(){\r\n        if(localStorage.getItem('Authorization') != null){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getHeader(){\r\n        return Object.create({\r\n            headers: {\r\n                Authorization: localStorage.getItem('Authorization'),\r\n                Username: localStorage.getItem('user')\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport default new AuthService();"]},"metadata":{},"sourceType":"module"}